{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get into mkdocs","text":"<p>homepage</p> <p>mkdocs material homepage</p> <p>a nice mkdocs privacy feature </p>"},{"location":"drawio/","title":"Include DrawIo directly","text":""},{"location":"mathematics/","title":"This is cool","text":"\\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] <p>Gauss's Law for Electricity:</p> \\[ \\begin{equation} \\nabla \\cdot \\mathbf{E} = \\frac{\\rho}{\\varepsilon_0} \\end{equation} \\] <p>Gauss's Law for Magnetism:</p> \\[ \\begin{equation} \\nabla \\cdot \\mathbf{B} = 0 \\end{equation} \\] <p>Faraday's Law of Induction:</p> \\[ \\begin{equation} \\nabla \\times \\mathbf{E} = -\\frac{\\partial \\mathbf{B}}{\\partial t} \\end{equation} \\] <p>Amp\u00e8re's Law with Maxwell's Addition:</p> \\[ \\begin{equation} \\nabla \\times \\mathbf{B} = \\mu_0 \\mathbf{J} + \\mu_0 \\varepsilon_0 \\frac{\\partial \\mathbf{E}}{\\partial t} \\end{equation} \\]"},{"location":"mermaid/","title":"Mermaid and excalidraw.com","text":"<p>Those picture were generated by excalidraw</p> <p>I entered this prompt:</p> <p>I like to visualize the logic behind an odata service.I have a main entity cops and a virtual entity v1,v2 and v3. It is necessary to call the main entity xyz before the entities v1,v2 and v3 will return anything. The call to the main entity xyz buffers all the data on the server. I need this as a sequence diagram.</p> <p>and got:</p> <pre><code>sequenceDiagram\n    participant Client\n    participant cops as Main Entity cops\n    participant v1 as Virtual Entity v1\n    participant v2 as Virtual Entity v2\n    participant v3 as Virtual Entity v3\n\n    Client-&gt;&gt;cops: Request data from Main Entity\n    Note right of cops: Data is buffered on Server\n    cops--&gt;&gt;Client: Data Response\n\n    Client-&gt;&gt;v1: Request data from Virtual Entity v1\n    v1--&gt;&gt;cops: Check for buffered data\n    cops-&gt;&gt;v1: Provide buffered data\n    v1--&gt;&gt;Client: Data Response\n\n    Client-&gt;&gt;v2: Request data from Virtual Entity v2\n    v2--&gt;&gt;cops: Check for buffered data\n    cops-&gt;&gt;v2: Provide buffered data\n    v2--&gt;&gt;Client: Data Response\n\n    Client-&gt;&gt;v3: Request data from Virtual Entity v3\n    v3--&gt;&gt;cops: Check for buffered data\n    cops-&gt;&gt;v3: Provide buffered data\n    v3--&gt;&gt;Client: Data Response\n</code></pre> <p>I have an odata service with a main entity \"cops\" and further entities that depend on \"cops\". It is necessary to call the main entity before the other entities will return anything. The call to cops buffers all the data on the server. I need this as a sequence diagram.</p> <pre><code>sequenceDiagram\n    actor Client\n    participant ODataService\n    participant \"cops\"\n    participant Buffer\n\n    Client-&gt;&gt;ODataService: Request \"cops\" data\n    ODataService-&gt;&gt;\"cops\": Fetch data\n    \"cops\"--&gt;&gt;Buffer: Store data\n    Buffer--&gt;&gt;ODataService: Data stored confirmation\n    ODataService--&gt;&gt;Client: \"cops\" data response\n\n    loop Fetch dependent entities\n        Client-&gt;&gt;ODataService: Request dependent entity data\n        ODataService-&gt;&gt;Buffer: Check \"cops\" data\n        Buffer--&gt;&gt;ODataService: Data available\n        ODataService-&gt;&gt;Dependent: Fetch dependent data\n        Dependent--&gt;&gt;ODataService: Dependent data response\n        ODataService--&gt;&gt;Client: Dependent entity data response\n    end\n</code></pre> <p>An odata service has a main entity \"cops\" and further entities that depend on \"cops\". It is necessary to call the main entity before the other entities will return anything. The call to \"cops\" buffers all the data on the server. After the data is buffered the system calls an external odata service \"oneLog\" to read additional data. The other entities will return a combination of \"cops\" and \"oneLog\". I need this as a sequence diagramm.</p> <pre><code>sequenceDiagram\n    participant Client\n    participant CopsService as Cops OData Service\n    participant OneLogService as OneLog OData Service\n    participant OtherEntities as Other Entities\n\n    Client-&gt;&gt;CopsService: Request data from \"cops\" entity\n    CopsService-&gt;&gt;CopsService: Buffer all data\n    Client-&gt;&gt;OneLogService: Request additional data\n    OneLogService--&gt;&gt;Client: Return additional data\n    Client-&gt;&gt;OtherEntities: Request combined data\n    OtherEntities-&gt;&gt;CopsService: Retrieve \"cops\" data\n    OtherEntities-&gt;&gt;OneLogService: Retrieve \"oneLog\" data\n    OtherEntities--&gt;&gt;Client: Return combined data of \"cops\" and \"oneLog\"\n</code></pre>"}]}